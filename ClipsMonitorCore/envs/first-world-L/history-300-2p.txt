; Contiene alcuni parametri che descrivono il particolare problema che dobbiamo risolvere

; Determina il tempo massimo che ha l'agente per effettuare la missione (non conta i passi, ma proprio il tempo).
; Quando il tempo scade viene interrotta l'esecuzione e viene assegnata una penalità se il robot non ha finito.
(maxduration 900000000000)

; Definisce la posizione e la direzione iniziale del robot, viene usata dal modulo AGENT
(initial_agentposition (pos-r 2) (pos-c 5) (direction north))

; Definiscono le informazioni sugli altri agenti presenti all'interno del nostro scenario
; nel file history viene definito il numero di soccorritori, la loro posizione iniziale e cosa fanno
; abbiamo una regola per ogni agente, la loro posizione, e l'attività corrente
(personstatus
        (step 0)
        (time 0)
        (ident C1)
        (pos-r 1)
        (pos-c 9)
        (activity out)) ; se il soccorritore è fuori la sua attività è out

(personstatus
        (step 0)
        (time 0)
        (ident C2)
        (pos-r 10)
        (pos-c 5)
        (activity out))

; come facciamo a definire cosa fanno i soccorritori? non può deciderlo nè l'agente robotico, nè l'ambiente perchè non è di loro competenza
; il file history quindi definisce anche cosa fanno gli agenti

; dice che al passo 5 il soccorritore C1 inizia a muoversi adottando come goal il percorso P1
(personmove (step 5) (ident C1) (path-id P1))
; dice che al passo 19 il soccorritore C1 inizia a muoversi adottando come goal il percorso P2
(personmove (step 19) (ident C1) (path-id P2))
; dato che non ci sono regole personmove del soccorritore C2, sappiamo che questo soccorritore starà fuori per tutto il tempo

; sono dei fatti ordinati (senza template)
; il primo parametro è l'ID del path
; il secondo lo step all'interno del cammino
; il terzo il soccorritore coinvolto,
; il terzo e il quarto sono l'ID della cella in cui il soccorritore si sposta
(move-path P1 1 C1  2 9)
(move-path P1 2 C1  3 9)
(move-path P1 3 C1  3 8)
(move-path P1 4 C1  3 7)
(move-path P1 5 C1  3 6)

(move-path P2 1 C1  4 6)
(move-path P2 2 C1  4 5)
(move-path P2 3 C1  3 5)
(move-path P2 4 C1  2 5)
(move-path P2 5 C1  1 5)
(move-path P2 6 C1  1 4)

; il modulo ENV deve comunque gestire questi cammini perchè deve sapere in ogni momento dove sono i soccorritori ed è il modulo che
; gestisce il tempo e i passi
; quando arriva allo step 5 deve iniziare a simulare il percorso del soccorritore C1
; al passo 6 C1 si dovrà trovare nella cella 2 9
; quando le mosse del percorse finiscono, l'ENV deve dire che il soccorritore sta fermo e se non ci sono altri inizi di attività
; di questo file per quel soccorritore, starà sempre fermo
; se il soccorritore si mette in un posto strategico può essere un ingombro non indifferente per il robot, però è del tutto lecita come situazione,
; seppur non ideale
; all'inizio non ci conviene testare il robot con tanti soccorritori che ci intralciano, si inizia con tutti i soccorritori fuori
; e poi si prova a inserirli all'interno per vedere come si comporta il robot
; il comportamento dei soccorritori è quasi cooperativo con il robot, perchè non vanno a scontrarsi volontariamente con il robot.
; L'ENV deve quindi interrompere il percorso del soccorritore se andrebbe a sbattere con il robot
; allo stesso modo il robot non deve andare a sbattere con i soccorritori
; questa cooperazione potrebbe portare a un deadlock (dovremmo considerare questo problema e cercare di evitare che il robot si metta in situazioni di deadlock.
; Dato che è un problema complesso è meglio iniziare ad affrontarlo alla fine, dopo che siamo sicuri che per lo meno non vada a sbattere contro le persone)
; i soccorritori non sono però così cooperativi da non intralciare il robot, l'unico modo in cui cooperano è non andandoci a sbattere addosso
; Dato l'ambiente, quello che fa il robot deve adattarsi anche alla history, quello che fa l'agente se ha 100 istanti di tempo deve essere diverso da quello che fa se ne ha 1000
; se abbiamo tanti agenti in mezzo ai coglioni dobbiamo agire diversamente dal caso in cui non ne abbiamo
; Dobbiamo quindi provare il nostro agente con tante history diverse per verificare che l'agente si comporti bene
; dobbiamo partire da diverse posizioni iniziali, con diverso numero di agenti che partono in diverse posizioni e compiono percorsi diversi
