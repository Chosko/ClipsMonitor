/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package org.clipsmonitor.gui;

import java.awt.Graphics;
import java.awt.Graphics2D;
import java.awt.Image;
import java.io.File;
import java.util.Scanner;
import javax.swing.ImageIcon;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
import javax.swing.ListModel;
import javax.swing.filechooser.FileFilter;
import org.clipsmonitor.clips.ClipsConsole;
import org.clipsmonitor.core.MonitorImages;
import org.clipsmonitor.core.ProjectDirectory;
import org.clipsmonitor.monitor2015.RescueGenMap;
import org.netbeans.api.settings.ConvertAsProperties;
import org.openide.awt.ActionID;
import org.openide.awt.ActionReference;
import org.openide.windows.TopComponent;
import org.openide.util.NbBundle.Messages;
import org.json.JSONException;
import org.json.simple.parser.ParseException;
import org.openide.util.Exceptions;

/**
 * Top component which displays something.
 */
@ConvertAsProperties(
        dtd = "-//org.clipsmonitor.gui//MapGenerator//EN",
        autostore = false
)
@TopComponent.Description(
        preferredID = "MapGeneratorTopComponent",
        //iconBase="SET/PATH/TO/ICON/HERE", 
        persistenceType = TopComponent.PERSISTENCE_ALWAYS
)

@TopComponent.Registration(mode = "mapGenerator", openAtStartup = true)
@ActionID(category = "Window", id = "org.clipsmonitor.gui.MapGeneratorTopComponent")
@ActionReference(path = "Menu/Window" /*, position = 333 */)
@TopComponent.OpenActionRegistration(
        displayName = "#CTL_MapGeneratorAction",
        preferredID = "MapGeneratorTopComponent"
)
@Messages({
    "CTL_MapGeneratorAction=MapGenerator",
    "CTL_MapGeneratorTopComponent=MapGenerator Window",
    "HINT_MapGeneratorTopComponent=This is a MapGenerator window"
})


@SuppressWarnings({"rawtypes","unchecked"})
public final class MapGeneratorTopComponent extends TopComponent {

    
    // Var Declaration
    private RescueGenMap model;
    private MonitorImages img;
    private ClipsConsole console;
    private JFileChooser fc;
    private JFileChooser save;
    private ProjectDirectory directory;
    private String state;
    private int [] actualPosClicked;
    private String actualPath;
    
    public MapGeneratorTopComponent() {        
        initComponents();
        setName(Bundle.CTL_MapGeneratorTopComponent());
        setToolTipText(Bundle.HINT_MapGeneratorTopComponent());
        model = RescueGenMap.getInstance();
        img = MonitorImages.getInstance();
        int x =Integer.parseInt(this.XButton.getText());
        int y =Integer.parseInt(this.YButton.getText());
        actualPosClicked = new int [2];
        actualPosClicked[0]=(x/2)+1;
        actualPosClicked[1]=(y/2)+1;
        actualPath = "empty";
        this.WaitTime.setText("0");
        this.initComboBox();
        this.MakePersonList();
        this.MakeStepList(-1);
        this.MakeMoveList(-1,-1,"all");
        this.MakePathList(-1);
        this.state=this.InsertionOptionComboBox.getSelectedItem().toString();
        model.initModelMap(x, y, PreviewMap.getWidth(), PreviewMap.getHeight());
        console= ClipsConsole.getInstance();
        directory = ProjectDirectory.getIstance(new File("./"));
        fc = new JFileChooser();
        save = new JFileChooser();
        fc.setCurrentDirectory(directory.getProjectDirectory());
        fc.setFileFilter(new JSONFilter());
        fc.setFileSelectionMode(JFileChooser.DIRECTORIES_ONLY);
        save.setCurrentDirectory(directory.getProjectDirectory());
        save.setFileSelectionMode(JFileChooser.DIRECTORIES_ONLY);
        this.MapButton.setSelected(true);
        this.MoveButton.setSelected(false);
        this.MapButton.setEnabled(false);
        this.MoveButton.setEnabled(true);
        this.AddPathButton.setEnabled(false);
        this.AddPersonButton.setEnabled(false);
        this.DeletePersonButton.setEnabled(false);
        this.RemovePathButton.setEnabled(false);
        this.setListEnable();

    }
    
    
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */ 
  // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
  private void initComponents() {

    jPanel2 = new javax.swing.JPanel();
    jTextField1 = new javax.swing.JTextField();
    jPanel3 = new javax.swing.JPanel();
    jPanel1 = new javax.swing.JPanel();
    InsertionOptionComboBox = new javax.swing.JComboBox<String>();
    SaveButton = new javax.swing.JButton();
    LoadButton = new javax.swing.JButton();
    XButton = new javax.swing.JTextField();
    YButton = new javax.swing.JTextField();
    DimensionLabel = new javax.swing.JLabel();
    RefreshButton = new javax.swing.JButton();
    XLabel = new javax.swing.JLabel();
    YLabel = new javax.swing.JLabel();
    jLabel1 = new javax.swing.JLabel();
    MaxDur = new javax.swing.JTextField();
    MaxDuration = new javax.swing.JLabel();
    Icons = new javax.swing.JLabel();
    MapButton = new javax.swing.JRadioButton();
    MoveButton = new javax.swing.JRadioButton();
    jPanel5 = new javax.swing.JPanel();
    jLabel5 = new javax.swing.JLabel();
    AddPersonButton = new javax.swing.JButton();
    DeletePersonButton = new javax.swing.JButton();
    jScrollPane5 = new javax.swing.JScrollPane();
    PersonPathList = new javax.swing.JList();
    jLabel3 = new javax.swing.JLabel();
    jLabel2 = new javax.swing.JLabel();
    jScrollPane2 = new javax.swing.JScrollPane();
    StepList = new javax.swing.JList();
    jScrollPane3 = new javax.swing.JScrollPane();
    MovementList = new javax.swing.JList();
    AddPathButton = new javax.swing.JButton();
    RemovePathButton = new javax.swing.JButton();
    jScrollPane1 = new javax.swing.JScrollPane();
    PersonsList = new javax.swing.JList();
    jLabel4 = new javax.swing.JLabel();
    WaitTime = new javax.swing.JTextField();
    jLabel6 = new javax.swing.JLabel();
    jScrollPane4 = new javax.swing.JScrollPane();
    PreviewMap = new javax.swing.JPanel(){

      @Override
      protected void paintComponent(Graphics g) {
        super.paintComponent(g); // call superclass's paintComponent

        Graphics2D g2 = (Graphics2D) g; // cast g to Graphics2D

        if (model != null) {
          model.drawScene(g2, PreviewMap.getWidth(), PreviewMap.getHeight(), model.getMode());
        }
      }

    };
    jScrollPane6 = new javax.swing.JScrollPane();
    jTextArea1 = new javax.swing.JTextArea();

    javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
    jPanel2.setLayout(jPanel2Layout);
    jPanel2Layout.setHorizontalGroup(
      jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
      .addGap(0, 100, Short.MAX_VALUE)
    );
    jPanel2Layout.setVerticalGroup(
      jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
      .addGap(0, 100, Short.MAX_VALUE)
    );

    jTextField1.setText(org.openide.util.NbBundle.getMessage(MapGeneratorTopComponent.class, "MapGeneratorTopComponent.jTextField1.text")); // NOI18N

    setAttentionHighlight(true);

    InsertionOptionComboBox.setModel(new javax.swing.DefaultComboBoxModel<String>(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));
    InsertionOptionComboBox.addActionListener(new java.awt.event.ActionListener() {
      public void actionPerformed(java.awt.event.ActionEvent evt) {
        InsertionOptionComboBoxActionPerformed(evt);
      }
    });

    org.openide.awt.Mnemonics.setLocalizedText(SaveButton, org.openide.util.NbBundle.getMessage(MapGeneratorTopComponent.class, "MapGeneratorTopComponent.SaveButton.text")); // NOI18N
    SaveButton.addActionListener(new java.awt.event.ActionListener() {
      public void actionPerformed(java.awt.event.ActionEvent evt) {
        SaveButtonActionPerformed(evt);
      }
    });

    org.openide.awt.Mnemonics.setLocalizedText(LoadButton, org.openide.util.NbBundle.getMessage(MapGeneratorTopComponent.class, "MapGeneratorTopComponent.LoadButton.text")); // NOI18N
    LoadButton.addMouseListener(new java.awt.event.MouseAdapter() {
      public void mouseClicked(java.awt.event.MouseEvent evt) {
        LoadButtonMouseClicked(evt);
      }
    });
    LoadButton.addActionListener(new java.awt.event.ActionListener() {
      public void actionPerformed(java.awt.event.ActionEvent evt) {
        LoadButtonActionPerformed(evt);
      }
    });

    XButton.setText(org.openide.util.NbBundle.getMessage(MapGeneratorTopComponent.class, "MapGeneratorTopComponent.XButton.text")); // NOI18N

    YButton.setText(org.openide.util.NbBundle.getMessage(MapGeneratorTopComponent.class, "MapGeneratorTopComponent.YButton.text")); // NOI18N

    org.openide.awt.Mnemonics.setLocalizedText(DimensionLabel, org.openide.util.NbBundle.getMessage(MapGeneratorTopComponent.class, "MapGeneratorTopComponent.DimensionLabel.text")); // NOI18N

    org.openide.awt.Mnemonics.setLocalizedText(RefreshButton, org.openide.util.NbBundle.getMessage(MapGeneratorTopComponent.class, "MapGeneratorTopComponent.RefreshButton.text")); // NOI18N
    RefreshButton.addActionListener(new java.awt.event.ActionListener() {
      public void actionPerformed(java.awt.event.ActionEvent evt) {
        RefreshButtonActionPerformed(evt);
      }
    });

    org.openide.awt.Mnemonics.setLocalizedText(XLabel, org.openide.util.NbBundle.getMessage(MapGeneratorTopComponent.class, "MapGeneratorTopComponent.XLabel.text")); // NOI18N

    org.openide.awt.Mnemonics.setLocalizedText(YLabel, org.openide.util.NbBundle.getMessage(MapGeneratorTopComponent.class, "MapGeneratorTopComponent.YLabel.text")); // NOI18N

    org.openide.awt.Mnemonics.setLocalizedText(jLabel1, org.openide.util.NbBundle.getMessage(MapGeneratorTopComponent.class, "MapGeneratorTopComponent.jLabel1.text")); // NOI18N

    MaxDur.setText(org.openide.util.NbBundle.getMessage(MapGeneratorTopComponent.class, "MapGeneratorTopComponent.MaxDur.text")); // NOI18N

    org.openide.awt.Mnemonics.setLocalizedText(MaxDuration, org.openide.util.NbBundle.getMessage(MapGeneratorTopComponent.class, "MapGeneratorTopComponent.MaxDuration.text")); // NOI18N

    org.openide.awt.Mnemonics.setLocalizedText(Icons, org.openide.util.NbBundle.getMessage(MapGeneratorTopComponent.class, "MapGeneratorTopComponent.Icons.text")); // NOI18N

    MapButton.setSelected(true);
    org.openide.awt.Mnemonics.setLocalizedText(MapButton, org.openide.util.NbBundle.getMessage(MapGeneratorTopComponent.class, "MapGeneratorTopComponent.MapButton.text")); // NOI18N
    MapButton.setContentAreaFilled(false);
    MapButton.addActionListener(new java.awt.event.ActionListener() {
      public void actionPerformed(java.awt.event.ActionEvent evt) {
        MapButtonActionPerformed(evt);
      }
    });

    org.openide.awt.Mnemonics.setLocalizedText(MoveButton, org.openide.util.NbBundle.getMessage(MapGeneratorTopComponent.class, "MapGeneratorTopComponent.MoveButton.text")); // NOI18N
    MoveButton.addActionListener(new java.awt.event.ActionListener() {
      public void actionPerformed(java.awt.event.ActionEvent evt) {
        MoveButtonActionPerformed(evt);
      }
    });

    javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
    jPanel1.setLayout(jPanel1Layout);
    jPanel1Layout.setHorizontalGroup(
      jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
      .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
        .addGap(6, 6, 6)
        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
          .addComponent(InsertionOptionComboBox, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.PREFERRED_SIZE, 162, javax.swing.GroupLayout.PREFERRED_SIZE)
          .addGroup(javax.swing.GroupLayout.Alignment.LEADING, jPanel1Layout.createSequentialGroup()
            .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
              .addComponent(MaxDuration)
              .addComponent(SaveButton, javax.swing.GroupLayout.PREFERRED_SIZE, 73, javax.swing.GroupLayout.PREFERRED_SIZE))
            .addGap(6, 6, 6)
            .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
              .addComponent(MaxDur, javax.swing.GroupLayout.PREFERRED_SIZE, 71, javax.swing.GroupLayout.PREFERRED_SIZE)
              .addComponent(LoadButton, javax.swing.GroupLayout.PREFERRED_SIZE, 71, javax.swing.GroupLayout.PREFERRED_SIZE)
              .addComponent(MoveButton)))
          .addGroup(javax.swing.GroupLayout.Alignment.LEADING, jPanel1Layout.createSequentialGroup()
            .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
              .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 78, javax.swing.GroupLayout.PREFERRED_SIZE)
              .addComponent(DimensionLabel, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.PREFERRED_SIZE, 76, javax.swing.GroupLayout.PREFERRED_SIZE)
              .addGroup(javax.swing.GroupLayout.Alignment.LEADING, jPanel1Layout.createSequentialGroup()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                  .addComponent(XButton, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE)
                  .addGroup(jPanel1Layout.createSequentialGroup()
                    .addGap(12, 12, 12)
                    .addComponent(XLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 10, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                  .addGroup(jPanel1Layout.createSequentialGroup()
                    .addGap(12, 12, 12)
                    .addComponent(YLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 11, javax.swing.GroupLayout.PREFERRED_SIZE))
                  .addComponent(YButton, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE))))
            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
            .addComponent(RefreshButton, javax.swing.GroupLayout.PREFERRED_SIZE, 72, javax.swing.GroupLayout.PREFERRED_SIZE))
          .addComponent(Icons, javax.swing.GroupLayout.PREFERRED_SIZE, 162, javax.swing.GroupLayout.PREFERRED_SIZE))
        .addGap(6, 6, 6))
      .addGroup(jPanel1Layout.createSequentialGroup()
        .addContainerGap()
        .addComponent(MapButton)
        .addContainerGap())
    );
    jPanel1Layout.setVerticalGroup(
      jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
      .addGroup(jPanel1Layout.createSequentialGroup()
        .addGap(6, 6, 6)
        .addComponent(DimensionLabel)
        .addGap(0, 0, 0)
        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
          .addComponent(YButton, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
          .addComponent(XButton, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
          .addComponent(RefreshButton))
        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
          .addComponent(XLabel)
          .addComponent(YLabel))
        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
        .addComponent(jLabel1)
        .addGap(6, 6, 6)
        .addComponent(InsertionOptionComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
        .addComponent(Icons, javax.swing.GroupLayout.PREFERRED_SIZE, 145, javax.swing.GroupLayout.PREFERRED_SIZE)
        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
          .addComponent(MaxDur, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
          .addComponent(MaxDuration))
        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
          .addComponent(LoadButton)
          .addComponent(SaveButton))
        .addGap(18, 18, 18)
        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
          .addComponent(MapButton)
          .addComponent(MoveButton))
        .addContainerGap())
    );

    org.openide.awt.Mnemonics.setLocalizedText(jLabel5, org.openide.util.NbBundle.getMessage(MapGeneratorTopComponent.class, "MapGeneratorTopComponent.jLabel5.text")); // NOI18N

    org.openide.awt.Mnemonics.setLocalizedText(AddPersonButton, org.openide.util.NbBundle.getMessage(MapGeneratorTopComponent.class, "MapGeneratorTopComponent.AddPersonButton.text")); // NOI18N
    AddPersonButton.addActionListener(new java.awt.event.ActionListener() {
      public void actionPerformed(java.awt.event.ActionEvent evt) {
        AddPersonButtonActionPerformed(evt);
      }
    });

    org.openide.awt.Mnemonics.setLocalizedText(DeletePersonButton, org.openide.util.NbBundle.getMessage(MapGeneratorTopComponent.class, "MapGeneratorTopComponent.DeletePersonButton.text")); // NOI18N
    DeletePersonButton.addActionListener(new java.awt.event.ActionListener() {
      public void actionPerformed(java.awt.event.ActionEvent evt) {
        DeletePersonButtonActionPerformed(evt);
      }
    });

    PersonPathList.setModel(new javax.swing.AbstractListModel() {
      String[] strings = { "Item 1", "Item 2", "Item 3", "Item 4", "Item 5" };
      public int getSize() { return strings.length; }
      public Object getElementAt(int i) { return strings[i]; }
    });
    PersonPathList.addListSelectionListener(new javax.swing.event.ListSelectionListener() {
      public void valueChanged(javax.swing.event.ListSelectionEvent evt) {
        PersonPathListValueChanged(evt);
      }
    });
    jScrollPane5.setViewportView(PersonPathList);

    org.openide.awt.Mnemonics.setLocalizedText(jLabel3, org.openide.util.NbBundle.getMessage(MapGeneratorTopComponent.class, "MapGeneratorTopComponent.jLabel3.text")); // NOI18N

    org.openide.awt.Mnemonics.setLocalizedText(jLabel2, org.openide.util.NbBundle.getMessage(MapGeneratorTopComponent.class, "MapGeneratorTopComponent.jLabel2.text")); // NOI18N

    StepList.setModel(new javax.swing.AbstractListModel() {
      String[] strings = { "Item 1", "Item 2", "Item 3", "Item 4", "Item 5" };
      public int getSize() { return strings.length; }
      public Object getElementAt(int i) { return strings[i]; }
    });
    StepList.addListSelectionListener(new javax.swing.event.ListSelectionListener() {
      public void valueChanged(javax.swing.event.ListSelectionEvent evt) {
        StepListValueChanged(evt);
      }
    });
    jScrollPane2.setViewportView(StepList);

    MovementList.setModel(new javax.swing.AbstractListModel() {
      String[] strings = { "Item 1", "Item 2", "Item 3", "Item 4", "Item 5" };
      public int getSize() { return strings.length; }
      public Object getElementAt(int i) { return strings[i]; }
    });
    MovementList.addListSelectionListener(new javax.swing.event.ListSelectionListener() {
      public void valueChanged(javax.swing.event.ListSelectionEvent evt) {
        MovementListValueChanged(evt);
      }
    });
    jScrollPane3.setViewportView(MovementList);

    org.openide.awt.Mnemonics.setLocalizedText(AddPathButton, org.openide.util.NbBundle.getMessage(MapGeneratorTopComponent.class, "MapGeneratorTopComponent.AddPathButton.text")); // NOI18N
    AddPathButton.addActionListener(new java.awt.event.ActionListener() {
      public void actionPerformed(java.awt.event.ActionEvent evt) {
        AddPathButtonActionPerformed(evt);
      }
    });

    org.openide.awt.Mnemonics.setLocalizedText(RemovePathButton, org.openide.util.NbBundle.getMessage(MapGeneratorTopComponent.class, "MapGeneratorTopComponent.RemovePathButton.text")); // NOI18N
    RemovePathButton.addActionListener(new java.awt.event.ActionListener() {
      public void actionPerformed(java.awt.event.ActionEvent evt) {
        RemovePathButtonActionPerformed(evt);
      }
    });

    PersonsList.setModel(new javax.swing.AbstractListModel() {
      String[] strings = { "Item 1", "Item 2", "Item 3", "Item 4", "Item 5" };
      public int getSize() { return strings.length; }
      public Object getElementAt(int i) { return strings[i]; }
    });
    PersonsList.addMouseListener(new java.awt.event.MouseAdapter() {
      public void mouseClicked(java.awt.event.MouseEvent evt) {
        PersonsListMouseClicked(evt);
      }
    });
    PersonsList.addListSelectionListener(new javax.swing.event.ListSelectionListener() {
      public void valueChanged(javax.swing.event.ListSelectionEvent evt) {
        PersonsListValueChanged(evt);
      }
    });
    jScrollPane1.setViewportView(PersonsList);

    org.openide.awt.Mnemonics.setLocalizedText(jLabel4, org.openide.util.NbBundle.getMessage(MapGeneratorTopComponent.class, "MapGeneratorTopComponent.jLabel4.text")); // NOI18N

    WaitTime.setText(org.openide.util.NbBundle.getMessage(MapGeneratorTopComponent.class, "MapGeneratorTopComponent.WaitTime.text")); // NOI18N

    org.openide.awt.Mnemonics.setLocalizedText(jLabel6, org.openide.util.NbBundle.getMessage(MapGeneratorTopComponent.class, "MapGeneratorTopComponent.jLabel6.text")); // NOI18N

    javax.swing.GroupLayout jPanel5Layout = new javax.swing.GroupLayout(jPanel5);
    jPanel5.setLayout(jPanel5Layout);
    jPanel5Layout.setHorizontalGroup(
      jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
      .addGroup(jPanel5Layout.createSequentialGroup()
        .addGap(6, 6, 6)
        .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
          .addGroup(jPanel5Layout.createSequentialGroup()
            .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
              .addComponent(jScrollPane1, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 89, javax.swing.GroupLayout.PREFERRED_SIZE)
              .addComponent(AddPersonButton, javax.swing.GroupLayout.PREFERRED_SIZE, 89, javax.swing.GroupLayout.PREFERRED_SIZE)
              .addComponent(DeletePersonButton, javax.swing.GroupLayout.PREFERRED_SIZE, 89, javax.swing.GroupLayout.PREFERRED_SIZE)
              .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 89, javax.swing.GroupLayout.PREFERRED_SIZE))
            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
            .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
              .addComponent(jScrollPane5, javax.swing.GroupLayout.PREFERRED_SIZE, 97, javax.swing.GroupLayout.PREFERRED_SIZE)
              .addComponent(AddPathButton, javax.swing.GroupLayout.PREFERRED_SIZE, 97, javax.swing.GroupLayout.PREFERRED_SIZE)
              .addComponent(RemovePathButton, javax.swing.GroupLayout.PREFERRED_SIZE, 97, javax.swing.GroupLayout.PREFERRED_SIZE)
              .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 97, javax.swing.GroupLayout.PREFERRED_SIZE))
            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
            .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
              .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 75, javax.swing.GroupLayout.PREFERRED_SIZE)
              .addComponent(WaitTime, javax.swing.GroupLayout.PREFERRED_SIZE, 75, javax.swing.GroupLayout.PREFERRED_SIZE)
              .addComponent(jLabel6, javax.swing.GroupLayout.PREFERRED_SIZE, 75, javax.swing.GroupLayout.PREFERRED_SIZE)
              .addComponent(jLabel4, javax.swing.GroupLayout.PREFERRED_SIZE, 75, javax.swing.GroupLayout.PREFERRED_SIZE)))
          .addComponent(jLabel5)
          .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 285, javax.swing.GroupLayout.PREFERRED_SIZE))
        .addGap(6, 6, 6))
    );
    jPanel5Layout.setVerticalGroup(
      jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
      .addGroup(jPanel5Layout.createSequentialGroup()
        .addGap(6, 6, 6)
        .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
          .addComponent(jLabel4)
          .addComponent(jLabel3)
          .addComponent(jLabel2))
        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
        .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
          .addComponent(jScrollPane5, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.PREFERRED_SIZE, 140, javax.swing.GroupLayout.PREFERRED_SIZE)
          .addComponent(jScrollPane1, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.PREFERRED_SIZE, 140, javax.swing.GroupLayout.PREFERRED_SIZE)
          .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 140, javax.swing.GroupLayout.PREFERRED_SIZE))
        .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
          .addGroup(jPanel5Layout.createSequentialGroup()
            .addGap(14, 14, 14)
            .addComponent(jLabel6))
          .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
            .addComponent(AddPersonButton)
            .addComponent(AddPathButton)))
        .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
          .addGroup(jPanel5Layout.createSequentialGroup()
            .addGap(4, 4, 4)
            .addComponent(WaitTime, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
          .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
            .addComponent(DeletePersonButton)
            .addComponent(RemovePathButton)))
        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
        .addComponent(jLabel5, javax.swing.GroupLayout.PREFERRED_SIZE, 17, javax.swing.GroupLayout.PREFERRED_SIZE)
        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
        .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 137, javax.swing.GroupLayout.PREFERRED_SIZE)
        .addContainerGap())
    );

    PreviewMap.setAutoscrolls(true);
    PreviewMap.setEnabled(false);
    PreviewMap.setPreferredSize(new java.awt.Dimension(250, 250));
    PreviewMap.addMouseListener(new java.awt.event.MouseAdapter() {
      public void mouseClicked(java.awt.event.MouseEvent evt) {
        PreviewMapMouseClicked(evt);
      }
    });

    javax.swing.GroupLayout PreviewMapLayout = new javax.swing.GroupLayout(PreviewMap);
    PreviewMap.setLayout(PreviewMapLayout);
    PreviewMapLayout.setHorizontalGroup(
      PreviewMapLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
      .addGap(0, 300, Short.MAX_VALUE)
    );
    PreviewMapLayout.setVerticalGroup(
      PreviewMapLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
      .addGap(0, 250, Short.MAX_VALUE)
    );

    jScrollPane4.setViewportView(PreviewMap);

    jTextArea1.setColumns(20);
    jTextArea1.setRows(5);
    jScrollPane6.setViewportView(jTextArea1);

    javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
    jPanel3.setLayout(jPanel3Layout);
    jPanel3Layout.setHorizontalGroup(
      jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
      .addGroup(jPanel3Layout.createSequentialGroup()
        .addContainerGap()
        .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
          .addComponent(jScrollPane4, javax.swing.GroupLayout.DEFAULT_SIZE, 303, Short.MAX_VALUE)
          .addComponent(jScrollPane6))
        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
        .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
        .addComponent(jPanel5, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
        .addGap(0, 0, 0))
    );
    jPanel3Layout.setVerticalGroup(
      jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
      .addGroup(jPanel3Layout.createSequentialGroup()
        .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
          .addGroup(jPanel3Layout.createSequentialGroup()
            .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
            .addGap(0, 0, Short.MAX_VALUE))
          .addGroup(jPanel3Layout.createSequentialGroup()
            .addComponent(jScrollPane4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
            .addGap(18, 18, 18)
            .addComponent(jScrollPane6)))
        .addContainerGap())
      .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel3Layout.createSequentialGroup()
        .addGap(0, 19, Short.MAX_VALUE)
        .addComponent(jPanel5, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
    );

    javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
    this.setLayout(layout);
    layout.setHorizontalGroup(
      layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
      .addComponent(jPanel3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
    );
    layout.setVerticalGroup(
      layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
      .addGroup(layout.createSequentialGroup()
        .addComponent(jPanel3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
        .addGap(0, 0, 0))
    );
  }// </editor-fold>//GEN-END:initComponents

    /*
     
        ActionListener Methods
    
    */
    
    
    // PreviewMap MouseClick
    
    private void PreviewMapMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_PreviewMapMouseClicked
       
        try{
            int x = evt.getX();
            int y = evt.getY();
            
            this.actualPosClicked = model.getCellPosition(x, y);
            if(this.MapButton.isSelected()){
                this.ExecUpdateMap();
            }
            else{
                if(model.findPosByColor(state)!=-1){
                    this.actualPath= model.getLastPathOfPerson(state);
                    this.ExecUpdateMove();
                }
                else{
                    String [][] move;
                    move = model.getTmpMoveMap(this.actualPosClicked[0],this.actualPosClicked[1], state);
                    model.ApplyUpdateOnMoveMap(move);
                    model.CopyToActive(model.getMove());
                    PreviewMap.repaint();
                }
            }
            
        }
        catch(NullPointerException err){
            console.error(err);
        }
    }//GEN-LAST:event_PreviewMapMouseClicked

    private void RefreshButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_RefreshButtonActionPerformed

        //controllo che l'input sia intero
        //leggo le nuove dimensioni della scena e le comunico al metodo
        //resizeScene che si preoccuperà di ridimensionare la matrice mantenendo
        // i vecchi dati all'interno
        try {
            int num_row = Integer.parseInt(this.XButton.getText());
            int num_col = Integer.parseInt(this.YButton.getText());
            int max_dur = Integer.parseInt(this.MaxDur.getText());
            if (num_row >= 5 && num_col >= 5 && max_dur>0) {
                if(!this.model.getEmptyPerson()){
                   String message = "La modifica della griglia può causare l'eliminazione"
                   + "dei movimenti inseriti in modalità move. Continuare?";
                   if(JOptionPane.showConfirmDialog(DimensionLabel, message,"Resize",JOptionPane.YES_NO_OPTION)==JOptionPane.YES_OPTION);
                   {
                     updateMap(num_row,num_col,max_dur);
                     model.RemoveStepAfterResize();
                     
                   } 
                }
                else{
                  updateMap(num_row,num_col,max_dur);
                }
                PreviewMap.repaint();
                this.MakePersonList();
                this.MakeStepList(-1);
                this.MakeMoveList(-1,-1,"all");
                this.setListEnable();
            }
            else{
                console.error("Input non valido: Verificare che la griglia sia almeno di dimensione 5x5 ");
            }
        } catch (NumberFormatException err) {
            console.error("Input non valido: Verificare che i valori siano interi \n" );
        }
    }//GEN-LAST:event_RefreshButtonActionPerformed

    private void LoadButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_LoadButtonActionPerformed

        int returnVal = fc.showOpenDialog(this);
        if (returnVal == JFileChooser.APPROVE_OPTION) {
            try {
                File file = fc.getSelectedFile();
                model.LoadFiles(file);
                if(!this.MoveButton.isEnabled()){
                    this.InitColorComboBox();
                    if(getActiveColorMap()){
                        this.InsertionOptionComboBox.enable(true);
                        this.Icons.enable(true);
                        Icons.repaint();
                        model.CopySceneToMove();
                        this.actualPath = model.getLastPathOfPerson(state);
                        String[][] move = model.getMoveCellMap(actualPath,-1);
                        model.ApplyUpdateOnMoveMap(move);
                        model.CopyToActive(model.getMove());
                    }
                    else{
                        this.InsertionOptionComboBox.enable(true);
                        Icons.enable(true);
                        model.CopySceneToMove();
                        model.CopyToActive(model.getMove());
                    }
                
                }
                PreviewMap.repaint();
                this.MakePersonList();
                this.MakeStepList(-1);
                this.MakeMoveList(-1,-1,"all");
                this.setListEnable();
                
            } catch (ParseException ex) {
                console.error(ex);
            }

        }
    }//GEN-LAST:event_LoadButtonActionPerformed

    private void LoadButtonMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_LoadButtonMouseClicked

        int returnVal = fc.showOpenDialog(this);
        if (returnVal == JFileChooser.APPROVE_OPTION) {
            try {
                File file = fc.getSelectedFile();
                model.LoadFiles(file);
                if(!this.MoveButton.isEnabled()){
                    this.InitColorComboBox();
                    if(getActiveColorMap()){
                        this.InsertionOptionComboBox.enable(true);
                        this.Icons.enable(true);
                        Icons.repaint();
                        model.CopySceneToMove();
                        this.actualPath = model.getLastPathOfPerson(state);
                        String[][] move = model.getMoveCellMap(actualPath,-1);
                        model.ApplyUpdateOnMoveMap(move);
                        model.CopyToActive(model.getMove());
                    }
                    else{
                        this.InsertionOptionComboBox.enable(true);
                        Icons.enable(true);
                        model.CopySceneToMove();
                        model.CopyToActive(model.getMove());
                    }
                
                }
                PreviewMap.repaint();
                this.MakePersonList();
                this.MakeStepList(-1);
                this.MakeMoveList(-1,-1,"all");
                this.setListEnable();
                
            } catch (ParseException ex) {
                console.error(ex);
            }

        }
    }//GEN-LAST:event_LoadButtonMouseClicked

    
    
    private void SaveButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_SaveButtonActionPerformed
        int retrival = save.showSaveDialog(this);
        if (retrival == JFileChooser.APPROVE_OPTION) {
            try {
               String output = model.SaveFiles(save.getSelectedFile());
               console.info(output);
            } catch (JSONException ex) {
                Exceptions.printStackTrace(ex);
            }
        }
    }//GEN-LAST:event_SaveButtonActionPerformed

    
    
    private void InsertionOptionComboBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_InsertionOptionComboBoxActionPerformed
        boolean checkButton = this.MapButton.isSelected();
        if(!checkButton){
            setState(InsertionOptionComboBox.getSelectedItem().toString());
            this.updateLabel(state);
            this.actualPath = model.getLastPathOfPerson(state);
            if(!this.actualPath.equals("empty")){
              int pos = model.findPosByColor(state);
              this.MakePersonList();
              this.MakeStepList(-1);
              this.MakeMoveList(pos,-1,"all");
            }
            else{
              this.MakePersonList();
              this.MakeStepList(-1);
              this.MakeMoveList(-1,-1,"all");
              
            }
            this.setListEnable();
            String[][] move = model.getMoveCellMap(actualPath,-1);
            model.ApplyUpdateOnMoveMap(move);
            model.CopyToActive(model.getMove());
            PreviewMap.repaint();
        }
        else{
            setState(InsertionOptionComboBox.getSelectedItem().toString());
            this.updateLabel(state);
        }
        Icons.repaint();
    }//GEN-LAST:event_InsertionOptionComboBoxActionPerformed

    private void AddPersonButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_AddPersonButtonActionPerformed
        this.ExecAddPerson();
        
    }//GEN-LAST:event_AddPersonButtonActionPerformed

    private void DeletePersonButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_DeletePersonButtonActionPerformed
        this.ExecRemove();
    }//GEN-LAST:event_DeletePersonButtonActionPerformed

    private void MovementListValueChanged(javax.swing.event.ListSelectionEvent evt) {//GEN-FIRST:event_MovementListValueChanged
        // TODO add your handling code here:
    }//GEN-LAST:event_MovementListValueChanged

    
    private void MapButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_MapButtonActionPerformed
        this.MapButton.setSelected(true);
        this.MoveButton.setSelected(false);
        this.MapButton.setEnabled(false);
        this.MoveButton.setEnabled(true);
        this.XButton.setEditable(true);
        this.YButton.setEditable(true);
        this.MaxDur.setEditable(true);
        this.AddPathButton.setEnabled(false);
        this.AddPersonButton.setEnabled(false);
        this.DeletePersonButton.setEnabled(false);
        this.RemovePathButton.setEnabled(false);
        this.model.setMode("scene");
        this.InitMapComboBox();
        this.InsertionOptionComboBox.enable(true);
        this.Icons.enable(true);
        Icons.repaint();
        model.CopyToActive(model.getScene());
        this.MakePersonList();
        this.MakeStepList(-1);
        this.MakeMoveList(-1,-1,"all");
        this.MakePathList(-1);
        PreviewMap.repaint();
        this.StepList.setEnabled(false);
        this.PersonPathList.setEnabled(false);
        this.PersonsList.setEnabled(false);

    }//GEN-LAST:event_MapButtonActionPerformed

       
     
    private void MoveButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_MoveButtonActionPerformed
        this.MapButton.setSelected(false);
        this.MoveButton.setSelected(true);
        this.MapButton.setEnabled(true);
        this.MoveButton.setEnabled(false);
        this.XButton.setEditable(false);
        this.YButton.setEditable(false);
        this.MaxDur.setEditable(false);
        this.AddPathButton.setEnabled(true);
        this.AddPersonButton.setEnabled(true);
        this.DeletePersonButton.setEnabled(true);
        this.RemovePathButton.setEnabled(true);
        this.model.setMode("move");
        this.StepList.setEnabled(true);
        this.PersonPathList.setEnabled(true);
        this.PersonsList.setEnabled(true);
        
        this.InitColorComboBox();
        if(getActiveColorMap()){
            this.InsertionOptionComboBox.enable(true);
            this.Icons.enable(true);
            Icons.repaint();
            model.CopySceneToMove();
            this.actualPath = model.getLastPathOfPerson(state);
            String[][] move = model.getMoveCellMap(actualPath,-1);
            model.ApplyUpdateOnMoveMap(move);
            model.CopyToActive(model.getMove());
        }
        else{
            this.InsertionOptionComboBox.enable(true);
            Icons.enable(true);
            model.CopySceneToMove();
            model.CopyToActive(model.getMove());
        }
        
        
        PreviewMap.repaint();
        this.MakePersonList();
        this.MakeStepList(-1);
        this.MakePathList(-1);
        this.MakeMoveList(-1,-1,"all");
        this.setListEnable();
    }//GEN-LAST:event_MoveButtonActionPerformed

    
    
    private void PersonsListValueChanged(javax.swing.event.ListSelectionEvent evt) {//GEN-FIRST:event_PersonsListValueChanged
        
        String [] persons = model.getListPerson();
        if(evt.getFirstIndex()!=persons.length-1){
            String val = persons[evt.getFirstIndex()];
            String[] split = val.split("_");
            this.MakePersonList();
            int pos = model.findPosByColor(split[1]);
            this.MakeStepList(-1);
            this.MakeMoveList(pos,-1,"all");
            this.MakePathList(pos);
            this.setListEnable();
            setState(split[1]);
            this.updateLabel(state);
            this.actualPath = model.getLastPathOfPerson(state);
            if(!this.actualPath.equals("empty")){
                String[][] move = model.getMoveCellMap(actualPath,-1);
                model.ApplyUpdateOnMoveMap(move);
            }
            
            model.CopyToActive(model.getMove());
            PreviewMap.repaint();
        }
        else{
            this.MakePersonList();
            this.MakeStepList(-1);
            this.MakeMoveList(-1,-1,"all");
            this.MakePathList(-1);
        }
    }//GEN-LAST:event_PersonsListValueChanged

    
    private void StepListValueChanged(javax.swing.event.ListSelectionEvent evt) {//GEN-FIRST:event_StepListValueChanged
        
        String value = (String) this.StepList.getModel().getElementAt(evt.getFirstIndex());
        String intSubStr = value.substring(5); // "Step " length 
        int step = Integer.parseInt(intSubStr);
        this.MakeStepList(-1);
        this.MakePathList(-1);
        this.MakeMoveList(-1,step,"all");
        String [][] move = model.getMoveCellMap("none",step);
        model.ApplyUpdateOnMoveMap(move);
        model.CopyToActive(model.getMove());
        PreviewMap.repaint();
        this.setListEnable();
    }//GEN-LAST:event_StepListValueChanged

    private void AddPathButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_AddPathButtonActionPerformed
        this.ExecAddPath();
        
    }//GEN-LAST:event_AddPathButtonActionPerformed

    private void RemovePathButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_RemovePathButtonActionPerformed
        this.ExecRemovePath();
    }//GEN-LAST:event_RemovePathButtonActionPerformed

  private void PersonPathListValueChanged(javax.swing.event.ListSelectionEvent evt) {//GEN-FIRST:event_PersonPathListValueChanged
      ListModel<String> listmodel = this.PersonPathList.getModel();
      String pathname = listmodel.getElementAt(evt.getFirstIndex());
      this.MakeMoveList(-1,-1,pathname);
      String [][] move = model.getMoveCellMap(pathname,-1);
      model.ApplyUpdateOnMoveMap(move);
      model.CopyToActive(model.getMove());
      PreviewMap.repaint();
      this.setListEnable();
  }//GEN-LAST:event_PersonPathListValueChanged

  private void PersonsListMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_PersonsListMouseClicked
    // TODO add your handling code here:
  }//GEN-LAST:event_PersonsListMouseClicked
 
    
    
  // Variables declaration - do not modify//GEN-BEGIN:variables
  private javax.swing.JButton AddPathButton;
  private javax.swing.JButton AddPersonButton;
  private javax.swing.JButton DeletePersonButton;
  private javax.swing.JLabel DimensionLabel;
  private javax.swing.JLabel Icons;
  private javax.swing.JComboBox InsertionOptionComboBox;
  private javax.swing.JButton LoadButton;
  private javax.swing.JRadioButton MapButton;
  private javax.swing.JTextField MaxDur;
  private javax.swing.JLabel MaxDuration;
  private javax.swing.JRadioButton MoveButton;
  private javax.swing.JList MovementList;
  private javax.swing.JList PersonPathList;
  private javax.swing.JList PersonsList;
  private javax.swing.JPanel PreviewMap;
  private javax.swing.JButton RefreshButton;
  private javax.swing.JButton RemovePathButton;
  private javax.swing.JButton SaveButton;
  private javax.swing.JList StepList;
  private javax.swing.JTextField WaitTime;
  private javax.swing.JTextField XButton;
  private javax.swing.JLabel XLabel;
  private javax.swing.JTextField YButton;
  private javax.swing.JLabel YLabel;
  private javax.swing.JLabel jLabel1;
  private javax.swing.JLabel jLabel2;
  private javax.swing.JLabel jLabel3;
  private javax.swing.JLabel jLabel4;
  private javax.swing.JLabel jLabel5;
  private javax.swing.JLabel jLabel6;
  private javax.swing.JPanel jPanel1;
  private javax.swing.JPanel jPanel2;
  private javax.swing.JPanel jPanel3;
  private javax.swing.JPanel jPanel5;
  private javax.swing.JScrollPane jScrollPane1;
  private javax.swing.JScrollPane jScrollPane2;
  private javax.swing.JScrollPane jScrollPane3;
  private javax.swing.JScrollPane jScrollPane4;
  private javax.swing.JScrollPane jScrollPane5;
  private javax.swing.JScrollPane jScrollPane6;
  private javax.swing.JTextArea jTextArea1;
  private javax.swing.JTextField jTextField1;
  // End of variables declaration//GEN-END:variables
    @Override
    public void componentOpened() {
        // TODO add custom code on component opening
    }

    @Override
    public void componentClosed() {
        // TODO add custom code on component closing
    }

    void writeProperties(java.util.Properties p) {
        // better to version settings since initial version as advocated at
        // http://wiki.apidesign.org/wiki/PropertyFiles
        p.setProperty("version", "1.0");
        // TODO store your settings
    }

    void readProperties(java.util.Properties p) {
        String version = p.getProperty("version");
        // TODO read your settings according to their version
    }
  
    
    private void InitMapComboBox(){
    
        ComboBoxRenderer IconsComboBox = new ComboBoxRenderer(this.model.getSetKey(),this.InsertionOptionComboBox, this.Icons);
        updateLabel(this.InsertionOptionComboBox.getSelectedItem().toString());
    }
    
    private void InitColorComboBox(){
        
        
        ComboBoxRenderer IconsComboBox = new ComboBoxRenderer(this.model.getSetKeyColor(),this.InsertionOptionComboBox, this.Icons);
        updateLabel(this.InsertionOptionComboBox.getSelectedItem().toString());
     }
   
    
    
    /*
    * Genera l'immagine di preview della combobox
    * @param name : chiave dell'hash map
    * @param map : hashmap da cui prelevare le immagini
    */
    
    protected void updateLabel(String name) {
        
        try{
            ImageIcon icon = new ImageIcon (img.getImage(name));
            Image image = icon.getImage(); // transform it
            Image newimg = image.getScaledInstance(90,90,  java.awt.Image.SCALE_SMOOTH); // scale it the smooth way  
            icon = new ImageIcon(newimg);  // transform it back
            Icons.setIcon(icon);
            Icons.setToolTipText("A drawing of a " + name.toLowerCase());
            Icons.setText(null);
        }
        catch(NullPointerException e){
           Icons.setText("Image not found");
           System.out.println(e.getLocalizedMessage());
           console.error(e);
        }
        
    }


    private boolean getActiveColorMap(){
    
        String[] colors = model.getListColorActive();
        if(colors.length==1 && colors[0].equals("")){
            
            return false;
        }
        else{
        
            return true;
        }
    }
    
    
    private void MakePersonList(){
    
        String [] list = model.getListPerson();
        if(list==null){
            list = new String[1];
            list[0]="";
        }
        ListRenderer render = new ListRenderer(this.PersonsList,list);
        
    }
    
    
    
    private void MakeStepList(int paramStep){
    
        String [] list = model.getListStep(paramStep);
        if(list==null){
            list = new String[1];
            list[0]="";
        }
            ListRenderer render = new ListRenderer(this.StepList,list);
        
    }
    
    
    
    private void MakeMoveList(int paramPerson,int paramStep, String paramPath){
    
        String [] list = model.getListMove(paramPerson, paramStep, paramPath);
        if(list==null){
            list = new String[1];
            list[0]="";
        }
            ListRenderer render = new ListRenderer(this.MovementList,list);
        
    }
    
    private void MakePathList(int paramPerson){
    
        String [] list = model.getStringPaths(paramPerson);
        if(list==null){
            list = new String[1];
            list[0]="";
        }
            ListRenderer render = new ListRenderer(this.PersonPathList,list);
    
    }
    
   
    /*
      Aggiorna la combo e l'icona corrisponendentemente scelta
    */
    
    private void initComboBox(){
        
        ComboBoxRenderer IconsComboBox = new ComboBoxRenderer(this.model.getSetKey(),this.InsertionOptionComboBox, this.Icons);
        updateLabel(this.InsertionOptionComboBox.getSelectedItem().toString());
        
    }
    
    
    
    
    private void ExecRemove(){
    
        boolean result = this.model.Remove(state);
        if(result){
            console.info(state + " rimosso correttamente ");
            String[][] move = model.getMoveCellMap("none",0);
                    model.ApplyUpdateOnMoveMap(move);
            model.CopyToActive(model.getMove());
            PreviewMap.repaint();
            this.MakePersonList();
            this.MakeStepList(-1);
            this.MakeMoveList(-1,-1,"all");
            this.MakePathList(-1);
            this.setListEnable();
        }
        else{
            console.error(state + " non presente nello scenario");
        }
    }
    
    /*
    * Inserisce una nuova persona nello scenario        
    */        
            
    private void ExecAddPerson(){
    
        final int Success = 0;
        final int IllegalPosition = 1 ;
        final int keyColorEmpty = 2; 
        final int keyColorFull = 3;
        final int IllegalRobotPosition = 4;
        final int IllegalAgentPosition = 5;
        final int PersonOverride = 6;
    
        int wait = Integer.parseInt(this.WaitTime.getText());
        
        int result = this.model.AddNewPerson(this.actualPosClicked[0],this.actualPosClicked[1], state,wait);
            switch(result){
                case Success :
                    console.info("Modifica della mappa eseguita con successo");
                    this.actualPath = model.getLastPathOfPerson(state);
                    String [][]move = model.getMoveCellMap("none",model.getLastStepofPerson(state));
                    model.ApplyUpdateOnMoveMap(move);
                    model.CopyToActive(model.getMove());
                    PreviewMap.repaint();
                    this.MakePersonList();
                    this.MakeStepList(-1);
                    this.MakeMoveList(-1,-1,"all");
                    this.MakePathList(-1);
                    this.setListEnable();
                break;
                    
                case IllegalPosition :
                    console.error("Posizione del cursore illegale: Nessuna cella disponibile \n");
                break;
                case keyColorEmpty :
                    console.error("Color set vuoto");
                break;
                case keyColorFull :
                    console.error("Color set completo: Impossibile aggiungere ulteriore persona alla scena");
                break;
                case IllegalRobotPosition :
                    console.error("Posizione del robot non valida");
                break;
                case IllegalAgentPosition:
                    console.error("Posizione dell'agente non valida");
                break;
                
                case PersonOverride :
                     console.error("La cella è già occupata da un altro agente");
                break;
                default :
                    
                break;    
                  
            }
    }
    
    
    private void ExecAddPath(){
    
        final int Success = 0;
        final int IllegalStartCell = 1;
        final int IllegalPerson = 2;
        final int PersonOverride = 3;
        
        try{
            int wait = Integer.parseInt(this.WaitTime.getText());
            if(wait<0){
                throw new NumberFormatException();
            }
            
            int result = model.AddNewPathToPerson(state,wait);
            switch(result){
            
                case Success :
                    console.info("Path aggiunto correttamente");
                    this.actualPath = model.getLastPathOfPerson(state);
                    String[][] move = model.getMoveCellMap(actualPath,-1);
                    model.ApplyUpdateOnMoveMap(move);
                    model.CopyToActive(model.getMove());
                    PreviewMap.repaint();
                    this.MakePersonList();
                    this.MakeStepList(-1);
                    this.MakeMoveList(-1,-1,"all");
                    this.MakePathList(-1);
                    this.setListEnable();
                break;
                case IllegalStartCell :
                    console.error("Illegal start cell");
                break;
                case IllegalPerson :
                    console.error("Illegal Person");
                break;
                case PersonOverride :
                    console.error("Person ovveride");
                    
                break;           
            
            }
        }
        catch(NumberFormatException er){
           console.error("Valore di Waitstep non valido: Input deve essere necessariamente un intero positivo");
        }
       
    }
    
    
    public void ExecRemovePath(){
    
        final int Success = 0;
        final int PersonNotFound = 1;
        final int FirstPathRemove = 2;
    
        int result = model.RemoveLastPath(state);
        switch(result){
        
            case Success :
                console.info("Rimozione eseguita correttamente");
                this.actualPath = model.getLastPathOfPerson(state);
                String[][] move = model.getMoveCellMap("none",model.getLastStepofPerson(state));
                model.ApplyUpdateOnMoveMap(move);
                model.CopyToActive(model.getMove());
                PreviewMap.repaint();
                this.MakePersonList();
                this.MakeStepList(-1);
                this.MakeMoveList(-1,-1,"all");
                this.MakePathList(-1);  
                this.setListEnable();
            break;    
            
            case PersonNotFound :
                console.error("Persona attualmente non attiva");
            break;
            
            case FirstPathRemove :
                console.error("Impossibile rimuovere il primo path");
            break;    
                
        
        }
    
    }
    
    
    /*
    * Esegue una richiesta di aggiornamento dei movimenti di una certa persona
    * su una posizione specificata
    * 
    */
    
    private void ExecUpdateMove(){
        final int Success = 0;
        final int IllegalPosition = 1 ;
        final int UnavaiblePosition = 2 ;
        final int PersonOverride = 3;
        final int LastMoveRemove = 4;
        this.actualPath = model.getLastPathOfPerson(state);
        String[][] move;
        int result = model.UpdateMoveCell(this.actualPosClicked[0],this.actualPosClicked[1],actualPath);
        switch(result){
                case Success :
                    console.info("Movimento agente aggiunto con successo");
                    move = model.getMoveCellMap("none",model.getLastStepofPerson(state));
                    model.ApplyUpdateOnMoveMap(move);
                    model.CopyToActive(model.getMove());
                    PreviewMap.repaint();
                    this.MakePersonList();
                    this.MakeStepList(-1);
                    this.MakeMoveList(-1,-1,actualPath);
                    this.MakePathList(-1);
                    this.setListEnable();
                break;
                    
                case IllegalPosition :
                    console.error("Posizione del cursore illegale: Nessuna cella disponibile \n");
                break;
                case UnavaiblePosition :
                    
                    console.error("Movimento non disponibile ");
                break;
                case PersonOverride :
                    console.error("La cella è occupata da un altro agente");
                break;
                case LastMoveRemove : 
                    console.info("Movimento agente rimosso con successo");
                    
                    move = model.getMoveCellMap("none",model.getLastStepofPerson(state));
                    model.ApplyUpdateOnMoveMap(move);
                    model.CopyToActive(model.getMove());
                    PreviewMap.repaint();
                    this.MakePersonList();
                    this.MakeStepList(-1);
                    this.MakeMoveList(-1,-1,actualPath);
                    this.MakePathList(-1);
                    this.setListEnable();
                break;
                default :
                    
                break;
        }
        
    }
    
    
    /*
     Ridisegna la mappa di generazione in base alla nuova dimensione della griglia e imposta la nuova
     max duration
    */
    
    private void ExecUpdateMap(){
        
        final int Success = 0;
        final int IllegalPosition = 1 ;
        final int keyColorEmpty = 2; 
        final int keyColorFull = 3;
        final int IllegalRobotPosition = 4;
        final int IllegalAgentPosition = 5;
        final int PersonOverride = 6;
    
        int result = model.UpdateCell(this.actualPosClicked[0],this.actualPosClicked[1], state);
        switch(result){
            case Success :
                 console.info("Modifica della mappa eseguita con successo");
                 model.CopyToActive(model.getScene());
                 PreviewMap.repaint();
                 this.MakePersonList();
                 this.MakeStepList(-1);
                 this.MakeMoveList(-1,-1,"all");
                 this.MakePathList(-1);
                 this.setListEnable();
            break;

            case IllegalPosition :
                console.error("Posizione del cursore illegale: Nessuna cella disponibile \n");
            break;
            case keyColorEmpty :
                console.error("Color set vuoto");
            break;
            case keyColorFull :
                console.error("Color set completo: Impossibile aggiungere ulteriore persona alla scena");
            break;
            case IllegalRobotPosition :
                console.error("Posizione del robot non valida");
            break;
            case IllegalAgentPosition:
                console.error("Posizione dell'agente non valida");
            break;

            case PersonOverride :
                 console.error("La cella è già occupata da un altro agente");
            break;
            default :

            break;    

        }
    
    }
    
    
    
    /*
     * Ridisegna la mappa in base alla nuova dimensione della griglia richiesta e 
     * in base alla nuova durata del tempo prestabilita
    */
    
    
    void updateMap(int x, int y,int max) {
        model.setSizeScreen(PreviewMap.getWidth(),PreviewMap.getHeight());
        model.resize(x,y);
        model.initModelMap(x, y, PreviewMap.getWidth(),PreviewMap.getHeight());
        model.setMaxDuration(max);
        PreviewMap.repaint();
    }
    
    String getState() {
        return state;
    }

    void setState(String value) {
        state = value;
    }

    void errorMsg(String error) {
        console.error(error);
                
    }

    void printMsg(String Msg) {
        console.info(Msg);
    }

    private static class CLIPSFilter extends FileFilter {

        @Override
        public boolean accept(File f) {
            return f.getName().toLowerCase().endsWith(".clp") || f.isDirectory();
        }

        @Override
        public String getDescription() {
            return "CLIPS files (*.clp)";
        }
    }

    private class JSONFilter extends FileFilter {

        @Override
        public boolean accept(File f) {
            return f.getName().toLowerCase().endsWith(".json") || f.isDirectory();
        }

        @Override
        public String getDescription() {
            return "JSON files (*.json)";
        }
    
    }
    
    private void setListEnable(){
      if(this.PersonsList.getModel().getSize()<=1){
        this.PersonsList.setEnabled(false);
      }
      else{
        this.PersonsList.setEnabled(true);
      }
      if(this.PersonPathList.getModel().getSize()<1){
        this.PersonPathList.setEnabled(false);
      }
      else{
        this.PersonPathList.setEnabled(true);
      }
      if(this.StepList.getModel().getSize()<1){
        this.StepList.setEnabled(false);
      }
      else{
        this.StepList.setEnabled(true);
      }
    
    
    }
}
