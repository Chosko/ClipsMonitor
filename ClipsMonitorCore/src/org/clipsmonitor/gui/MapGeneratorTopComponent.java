/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package org.clipsmonitor.gui;

import java.awt.Graphics;
import java.awt.Graphics2D;
import java.awt.Image;
import java.awt.image.BufferedImage;
import java.io.File;
import java.util.HashMap;
import javax.swing.ImageIcon;
import javax.swing.JFileChooser;
import javax.swing.filechooser.FileFilter;
import org.clipsmonitor.clips.ClipsConsole;
import org.clipsmonitor.monitor2015.RescueGenMap;
import org.netbeans.api.settings.ConvertAsProperties;
import org.openide.awt.ActionID;
import org.openide.awt.ActionReference;
import org.openide.windows.TopComponent;
import org.openide.util.NbBundle.Messages;
import org.json.JSONException;
import org.openide.util.Exceptions;

/**
 * Top component which displays something.
 */
@ConvertAsProperties(
        dtd = "-//org.clipsmonitor.gui//MapGenerator//EN",
        autostore = false
)
@TopComponent.Description(
        preferredID = "MapGeneratorTopComponent",
        //iconBase="SET/PATH/TO/ICON/HERE", 
        persistenceType = TopComponent.PERSISTENCE_ALWAYS
)

@TopComponent.Registration(mode = "map", openAtStartup = false)
@ActionID(category = "Window", id = "org.clipsmonitor.gui.MapGeneratorTopComponent")
@ActionReference(path = "Menu/Window" /*, position = 333 */)
@TopComponent.OpenActionRegistration(
        displayName = "#CTL_MapGeneratorAction",
        preferredID = "MapGeneratorTopComponent"
)
@Messages({
    "CTL_MapGeneratorAction=MapGenerator",
    "CTL_MapGeneratorTopComponent=MapGenerator Window",
    "HINT_MapGeneratorTopComponent=This is a MapGenerator window"
})


@SuppressWarnings({"rawtypes","unchecked"})
public final class MapGeneratorTopComponent extends TopComponent {

    
    // Var Declaration
    private RescueGenMap model;
    private String state;
    private HashMap<String,BufferedImage> icons;
    private ClipsConsole console;
    private JFileChooser fc;
    private JFileChooser save;
    
    
    
    public MapGeneratorTopComponent() {
        initComponents();
        setName(Bundle.CTL_MapGeneratorTopComponent());
        setToolTipText(Bundle.HINT_MapGeneratorTopComponent());
        model = RescueGenMap.getInstance();
        int x =Integer.parseInt(this.XButton.getText());
        int y =Integer.parseInt(this.YButton.getText());
        icons= model.getImages();
        this.initComboBox(icons);
        this.state=this.InsertionOptionComboBox.getSelectedItem().toString();
        model.initModelMap(x, y, PreviewMap.getWidth(), PreviewMap.getHeight());
        console= ClipsConsole.getInstance();
        fc = new JFileChooser();
        save = new JFileChooser();
        fc.setCurrentDirectory(new File("./"));
        fc.setFileFilter(new JSONFilter());

        save.setCurrentDirectory(new File("./"));
        //save_fc.setFileFilter(new CLIPSFilter());
        save.setFileSelectionMode(JFileChooser.DIRECTORIES_ONLY);
        
    }
    
    
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel2 = new javax.swing.JPanel();
        jTextField1 = new javax.swing.JTextField();
        jPanel3 = new javax.swing.JPanel();
        PreviewMap = new javax.swing.JPanel(){

            @Override
            protected void paintComponent(Graphics g) {
                super.paintComponent(g); // call superclass's paintComponent

                Graphics2D g2 = (Graphics2D) g; // cast g to Graphics2D

                if (model != null) {
                    model.drawScene(g2, PreviewMap.getWidth(), PreviewMap.getHeight());
                }
            }

        };
        jPanel1 = new javax.swing.JPanel();
        InsertionOptionComboBox = new javax.swing.JComboBox<String>();
        SaveButton = new javax.swing.JButton();
        LoadButton = new javax.swing.JButton();
        XButton = new javax.swing.JTextField();
        YButton = new javax.swing.JTextField();
        DimensionLabel = new javax.swing.JLabel();
        RefreshButton = new javax.swing.JButton();
        XLabel = new javax.swing.JLabel();
        YLabel = new javax.swing.JLabel();
        Icons = new javax.swing.JLabel();
        jLabel1 = new javax.swing.JLabel();
        MaxDur = new javax.swing.JTextField();
        MaxDuration = new javax.swing.JLabel();

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 100, Short.MAX_VALUE)
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 100, Short.MAX_VALUE)
        );

        jTextField1.setText(org.openide.util.NbBundle.getMessage(MapGeneratorTopComponent.class, "MapGeneratorTopComponent.jTextField1.text")); // NOI18N

        setAttentionHighlight(true);

        PreviewMap.setEnabled(false);
        PreviewMap.setPreferredSize(new java.awt.Dimension(250, 250));
        PreviewMap.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                PreviewMapMouseClicked(evt);
            }
        });

        javax.swing.GroupLayout PreviewMapLayout = new javax.swing.GroupLayout(PreviewMap);
        PreviewMap.setLayout(PreviewMapLayout);
        PreviewMapLayout.setHorizontalGroup(
            PreviewMapLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 250, Short.MAX_VALUE)
        );
        PreviewMapLayout.setVerticalGroup(
            PreviewMapLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 266, Short.MAX_VALUE)
        );

        InsertionOptionComboBox.setModel(new javax.swing.DefaultComboBoxModel<String>(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));
        InsertionOptionComboBox.addContainerListener(new java.awt.event.ContainerAdapter() {
            public void componentAdded(java.awt.event.ContainerEvent evt) {
                InsertionOptionComboBoxComponentAdded(evt);
            }
            public void componentRemoved(java.awt.event.ContainerEvent evt) {
                InsertionOptionComboBoxComponentRemoved(evt);
            }
        });
        InsertionOptionComboBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                InsertionOptionComboBoxActionPerformed(evt);
            }
        });

        org.openide.awt.Mnemonics.setLocalizedText(SaveButton, org.openide.util.NbBundle.getMessage(MapGeneratorTopComponent.class, "MapGeneratorTopComponent.SaveButton.text")); // NOI18N
        SaveButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                SaveButtonActionPerformed(evt);
            }
        });

        org.openide.awt.Mnemonics.setLocalizedText(LoadButton, org.openide.util.NbBundle.getMessage(MapGeneratorTopComponent.class, "MapGeneratorTopComponent.LoadButton.text")); // NOI18N
        LoadButton.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                LoadButtonMouseClicked(evt);
            }
        });
        LoadButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                LoadButtonActionPerformed(evt);
            }
        });

        XButton.setText(org.openide.util.NbBundle.getMessage(MapGeneratorTopComponent.class, "MapGeneratorTopComponent.XButton.text")); // NOI18N
        XButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                XButtonActionPerformed(evt);
            }
        });

        YButton.setText(org.openide.util.NbBundle.getMessage(MapGeneratorTopComponent.class, "MapGeneratorTopComponent.YButton.text")); // NOI18N

        org.openide.awt.Mnemonics.setLocalizedText(DimensionLabel, org.openide.util.NbBundle.getMessage(MapGeneratorTopComponent.class, "MapGeneratorTopComponent.DimensionLabel.text")); // NOI18N

        org.openide.awt.Mnemonics.setLocalizedText(RefreshButton, org.openide.util.NbBundle.getMessage(MapGeneratorTopComponent.class, "MapGeneratorTopComponent.RefreshButton.text")); // NOI18N
        RefreshButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                RefreshButtonActionPerformed(evt);
            }
        });

        org.openide.awt.Mnemonics.setLocalizedText(XLabel, org.openide.util.NbBundle.getMessage(MapGeneratorTopComponent.class, "MapGeneratorTopComponent.XLabel.text")); // NOI18N

        org.openide.awt.Mnemonics.setLocalizedText(YLabel, org.openide.util.NbBundle.getMessage(MapGeneratorTopComponent.class, "MapGeneratorTopComponent.YLabel.text")); // NOI18N

        org.openide.awt.Mnemonics.setLocalizedText(Icons, org.openide.util.NbBundle.getMessage(MapGeneratorTopComponent.class, "MapGeneratorTopComponent.Icons.text")); // NOI18N

        org.openide.awt.Mnemonics.setLocalizedText(jLabel1, org.openide.util.NbBundle.getMessage(MapGeneratorTopComponent.class, "MapGeneratorTopComponent.jLabel1.text")); // NOI18N

        MaxDur.setText(org.openide.util.NbBundle.getMessage(MapGeneratorTopComponent.class, "MapGeneratorTopComponent.MaxDur.text")); // NOI18N

        org.openide.awt.Mnemonics.setLocalizedText(MaxDuration, org.openide.util.NbBundle.getMessage(MapGeneratorTopComponent.class, "MapGeneratorTopComponent.MaxDuration.text")); // NOI18N

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(InsertionOptionComboBox, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(jPanel1Layout.createSequentialGroup()
                                        .addGap(25, 25, 25)
                                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addComponent(DimensionLabel)
                                            .addGroup(jPanel1Layout.createSequentialGroup()
                                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                                    .addComponent(XButton, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                    .addComponent(XLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 18, javax.swing.GroupLayout.PREFERRED_SIZE))
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                                    .addComponent(YButton, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                    .addComponent(YLabel)))))
                                    .addGroup(jPanel1Layout.createSequentialGroup()
                                        .addGap(15, 15, 15)
                                        .addComponent(RefreshButton, javax.swing.GroupLayout.PREFERRED_SIZE, 122, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addGroup(jPanel1Layout.createSequentialGroup()
                                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                            .addComponent(Icons, javax.swing.GroupLayout.PREFERRED_SIZE, 42, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addComponent(MaxDuration, javax.swing.GroupLayout.PREFERRED_SIZE, 92, javax.swing.GroupLayout.PREFERRED_SIZE))
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                        .addComponent(MaxDur, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)))
                                .addGap(0, 0, Short.MAX_VALUE)))
                        .addContainerGap())
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                        .addGap(0, 7, Short.MAX_VALUE)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                                .addComponent(jLabel1)
                                .addGap(62, 62, 62))
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                                .addComponent(SaveButton)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(LoadButton)
                                .addContainerGap())))))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(DimensionLabel)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(YButton, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(XButton))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(XLabel)
                    .addComponent(YLabel))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(RefreshButton)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jLabel1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(InsertionOptionComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(Icons, javax.swing.GroupLayout.PREFERRED_SIZE, 42, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(MaxDur, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(MaxDuration, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(LoadButton)
                    .addComponent(SaveButton))
                .addContainerGap(44, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addGap(0, 0, Short.MAX_VALUE)
                .addComponent(PreviewMap, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addComponent(PreviewMap, javax.swing.GroupLayout.PREFERRED_SIZE, 266, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
        );
    }// </editor-fold>//GEN-END:initComponents

    /*
     
        ActionListener Methods
    
    */
    
    
    // PreviewMap MouseClick
    
    private void PreviewMapMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_PreviewMapMouseClicked
        try{
            int x = evt.getX();
            int y = evt.getY();
            int [] posCell = new int [2] ;
            posCell = model.getCellPosition(x, y);
            boolean result = model.UpdateCell(posCell[0],posCell[1], state);
            if(result){
                PreviewMap.repaint();
            }
        }
        catch(NullPointerException err){
            err.printStackTrace();
        }
    }//GEN-LAST:event_PreviewMapMouseClicked

    private void RefreshButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_RefreshButtonActionPerformed

        //controllo che l'input sia intero
        //leggo le nuove dimensioni della scena e le comunico al metodo
        //resizeScene che si preoccuperà di ridimensionare la matrice mantenendo
        // i vecchi dati all'interno
        try {
            int num_row = Integer.parseInt(this.XButton.getText());
            int num_col = Integer.parseInt(this.YButton.getText());
            int max_dur = Integer.parseInt(this.MaxDur.getText());
            if (num_row >= 5 && num_col >= 5 && max_dur>0) {

                updateMap(num_row,num_col,max_dur);
            }
            else{
                console.error("Input non valido: Verificare che la griglia sia almeno di dimensione 5x5 ");
            }
        } catch (NumberFormatException err) {
            console.error("Input non valido: Verificare che i valori siano interi \n" );
            err.printStackTrace();
        }
    }//GEN-LAST:event_RefreshButtonActionPerformed

    private void XButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_XButtonActionPerformed

    }//GEN-LAST:event_XButtonActionPerformed

    private void LoadButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_LoadButtonActionPerformed

        int returnVal = fc.showOpenDialog(this);
        if (returnVal == JFileChooser.APPROVE_OPTION) {
            try {
                File file = fc.getSelectedFile();
                model.load_scene(file);
                
                PreviewMap.repaint();
            } catch (Exception ex) {
                Exceptions.printStackTrace(ex);
            }

        }
    }//GEN-LAST:event_LoadButtonActionPerformed

    private void LoadButtonMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_LoadButtonMouseClicked

        int returnVal = fc.showOpenDialog(this);
        if (returnVal == JFileChooser.APPROVE_OPTION) {
            try {
                File file = fc.getSelectedFile();
                model.load_scene(file);
                //model.initModelMap(model.getNumy(),model.getNumy(),PreviewMap.getWidth(), PreviewMap.getHeight());
                PreviewMap.repaint();
            } catch (Exception ex) {
                Exceptions.printStackTrace(ex);
            }

        }
    }//GEN-LAST:event_LoadButtonMouseClicked

    private void SaveButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_SaveButtonActionPerformed
        int retrival = save.showSaveDialog(this);
        if (retrival == JFileChooser.APPROVE_OPTION) {
            try {
               String output = model.exportScene(save.getSelectedFile());
               console.info(output);
            } catch (JSONException ex) {
                Exceptions.printStackTrace(ex);
            }
        }
    }//GEN-LAST:event_SaveButtonActionPerformed

    private void InsertionOptionComboBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_InsertionOptionComboBoxActionPerformed

        setState(InsertionOptionComboBox.getSelectedItem().toString());
        this.updateLabel(state);
        Icons.repaint();
    }//GEN-LAST:event_InsertionOptionComboBoxActionPerformed

    private void InsertionOptionComboBoxComponentRemoved(java.awt.event.ContainerEvent evt) {//GEN-FIRST:event_InsertionOptionComboBoxComponentRemoved
        // TODO add your handling code here:
    }//GEN-LAST:event_InsertionOptionComboBoxComponentRemoved

    private void InsertionOptionComboBoxComponentAdded(java.awt.event.ContainerEvent evt) {//GEN-FIRST:event_InsertionOptionComboBoxComponentAdded
        // TODO add your handling code
    }//GEN-LAST:event_InsertionOptionComboBoxComponentAdded

    
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel DimensionLabel;
    private javax.swing.JLabel Icons;
    private javax.swing.JComboBox InsertionOptionComboBox;
    private javax.swing.JButton LoadButton;
    private javax.swing.JTextField MaxDur;
    private javax.swing.JLabel MaxDuration;
    private javax.swing.JPanel PreviewMap;
    private javax.swing.JButton RefreshButton;
    private javax.swing.JButton SaveButton;
    private javax.swing.JTextField XButton;
    private javax.swing.JLabel XLabel;
    private javax.swing.JTextField YButton;
    private javax.swing.JLabel YLabel;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JTextField jTextField1;
    // End of variables declaration//GEN-END:variables
    @Override
    public void componentOpened() {
        // TODO add custom code on component opening
    }

    @Override
    public void componentClosed() {
        // TODO add custom code on component closing
    }

    void writeProperties(java.util.Properties p) {
        // better to version settings since initial version as advocated at
        // http://wiki.apidesign.org/wiki/PropertyFiles
        p.setProperty("version", "1.0");
        // TODO store your settings
    }

    void readProperties(java.util.Properties p) {
        String version = p.getProperty("version");
        // TODO read your settings according to their version
    }
   
    
    
    
    
    // Aggiornamento dell'img di preview
    
    protected void updateLabel(String name) {
        
        
        
        try{
            ImageIcon icon = new ImageIcon (this.icons.get(name));
            Image image = icon.getImage(); // transform it 
            Image newimg = image.getScaledInstance(90, 90,  java.awt.Image.SCALE_SMOOTH); // scale it the smooth way  
            icon = new ImageIcon(newimg);  // transform it back
            Icons.setIcon(icon);
            Icons.setToolTipText("A drawing of a " + name.toLowerCase());
            Icons.setText(null);
        }
        catch(NullPointerException e){
           Icons.setText("Image not found");
           System.out.println(e.getLocalizedMessage());
        }
        
    }


    
    
    /*
      Update Combobox label for new selected icon
    */
    
    private void initComboBox(HashMap<String,BufferedImage> icons){
    
        ComboBoxRenderer IconsComboBox = new ComboBoxRenderer(icons,this.InsertionOptionComboBox, this.Icons);
        updateLabel(this.InsertionOptionComboBox.getSelectedItem().toString());
        
    }
    
    /*
     Ridisegna la mappa di generazione in base alla nuova dimensione della griglia e imposta la nuova
     max duration
    */
    
    
    
    void updateMap(int x, int y,int max) {
        model.setSizeScreen(PreviewMap.getWidth(),PreviewMap.getHeight());
        model.resize(x,y);
        model.initModelMap(x, y, PreviewMap.getWidth(),PreviewMap.getHeight());
        model.setMaxDuration(max);
        PreviewMap.repaint();
    }
    
    String getState() {
        return state;
    }

    void setState(String value) {
        state = value;
    }

    void errorMsg(String error) {
            console.error(error);
                
    }

    void printMsg(String Msg) {
          console.info(Msg);
    }

    private static class CLIPSFilter extends FileFilter {

        @Override
        public boolean accept(File f) {
            return f.getName().toLowerCase().endsWith(".clp") || f.isDirectory();
        }

        @Override
        public String getDescription() {
            return "CLIPS files (*.clp)";
        }
    }

    private class JSONFilter extends FileFilter {

        @Override
        public boolean accept(File f) {
            return f.getName().toLowerCase().endsWith(".json") || f.isDirectory();
        }

        @Override
        public String getDescription() {
            return "JSON files (*.json)";
        }
    
    }
    

}
