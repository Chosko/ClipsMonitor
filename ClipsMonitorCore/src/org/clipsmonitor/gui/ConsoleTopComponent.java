/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package org.clipsmonitor.gui;

import java.awt.Color;
import java.util.Observable;
import java.util.Observer;
import javafx.scene.control.Alert;
import javafx.scene.control.ButtonType;
import org.clipsmonitor.core.MonitorConsole;
import org.netbeans.api.settings.ConvertAsProperties;
import org.openide.awt.ActionID;
import org.openide.awt.ActionReference;
import org.openide.windows.TopComponent;
import org.openide.util.NbBundle.Messages;

/**
 * Top component which displays something.
 */
@ConvertAsProperties(
        dtd = "-//org.clipsmonitor.gui//Console//EN",
        autostore = false
)
@TopComponent.Description(
        preferredID = "ConsoleTopComponent",
        //iconBase="SET/PATH/TO/ICON/HERE", 
        persistenceType = TopComponent.PERSISTENCE_ALWAYS
)
@TopComponent.Registration(mode = "console", openAtStartup = true)
@ActionID(category = "Window", id = "org.clipsmonitor.gui.ConsoleTopComponent")
@ActionReference(path = "Menu/Window" /*, position = 333 */)
@TopComponent.OpenActionRegistration(
        displayName = "#CTL_ConsoleAction",
        preferredID = "ConsoleTopComponent"
)
@Messages({
    "CTL_ConsoleAction=Console",
    "CTL_ConsoleTopComponent=Console Window",
    "HINT_ConsoleTopComponent=This is a Console window"
})
public final class ConsoleTopComponent extends TopComponent implements Observer {
    private String text;
    private MonitorConsole console;
    
    public ConsoleTopComponent() {
        initComponents();
        setName(Bundle.CTL_ConsoleTopComponent());
        setToolTipText(Bundle.HINT_ConsoleTopComponent());
        console = MonitorConsole.getInstance();
        console.addObserver(this);
        text = console.getFullOutput();
        this.updatePane();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        jTextPane1 = new javax.swing.JTextPane();

        jScrollPane1.setToolTipText(org.openide.util.NbBundle.getMessage(ConsoleTopComponent.class, "ConsoleTopComponent.jScrollPane1.toolTipText")); // NOI18N

        jTextPane1.setEditable(false);
        jTextPane1.setBackground(new java.awt.Color(230, 230, 230));
        jTextPane1.setText(org.openide.util.NbBundle.getMessage(ConsoleTopComponent.class, "ConsoleTopComponent.jTextPane1.text")); // NOI18N
        jTextPane1.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        jTextPane1.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                jTextPane1FocusGained(evt);
            }
        });
        jTextPane1.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jTextPane1MouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(jTextPane1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 272, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 206, Short.MAX_VALUE)
        );
    }// </editor-fold>//GEN-END:initComponents

    private void jTextPane1FocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_jTextPane1FocusGained
        this.setCursorPosition();
    }//GEN-LAST:event_jTextPane1FocusGained

    private void jTextPane1MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jTextPane1MouseClicked
        this.setCursorPosition();
    }//GEN-LAST:event_jTextPane1MouseClicked

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTextPane jTextPane1;
    // End of variables declaration//GEN-END:variables
    @Override
    public void componentOpened() {
        
    }

    @Override
    public void componentClosed() {
        
    }

    void writeProperties(java.util.Properties p) {
        // better to version settings since initial version as advocated at
        // http://wiki.apidesign.org/wiki/PropertyFiles
        p.setProperty("version", "1.0");
        // TODO store your settings
    }

    void readProperties(java.util.Properties p) {
        String version = p.getProperty("version");
        // TODO read your settings according to their version
    }
    
    private void append(String s){
        if(this.text.length() > 0){
            this.text += "\n";
        }
        this.text += s;
        this.updatePane();
    }
    
    private void clear(){
        this.text = "";
        this.updatePane();
    }
    
    private void updatePane(){
        String newText = this.text;
        if(this.text.length() > 0){
            newText += "\n";
        }
        newText += "CLIPS > ";
        this.jTextPane1.setText(newText);
        this.setCursorPosition();
    }
    
    private void setCursorPosition(){
        this.jTextPane1.setCaretPosition(this.jTextPane1.getText().length());
    }

    @Override
    public void update(Observable o, Object arg) {
        if(o instanceof MonitorConsole){
            String evt = (String)arg;
            if(evt.equals("activated")){
                jTextPane1.setEditable(true);
                jTextPane1.setBackground(new Color(255,255,255));
            } 
            else if(evt.equals("deactivated")){
                jTextPane1.setEditable(false);
                jTextPane1.setBackground(new Color(230,230,230));
            }
            else if(evt.equals("debug") 
                    || evt.equals("error")
                    || evt.equals("warn")
                    || evt.equals("info")
                    || evt.equals("clips")){
                this.append(console.getLastOutput());
            }
            else if(evt.equals("clear")){
                this.clear();
            }
        }
    }
}
