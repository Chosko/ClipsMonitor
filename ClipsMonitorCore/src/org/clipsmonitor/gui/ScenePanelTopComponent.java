package org.clipsmonitor.gui;


import org.mapgenerator.MapGeneratorSceneModel;
import org.mapgenerator.MapGeneratorLoader;
import java.awt.Graphics;
import java.awt.Graphics2D;
import java.io.IOException;
import java.nio.file.Files;
import java.nio.file.Paths;
import java.util.logging.Level;
import java.util.logging.Logger;

/*
 * Classe che definisce la grafica e le interazioni del pannello centrale
 *
 * @author Tobia Giani, Alessandro Basile
 */
public class ScenePanelTopComponent extends javax.swing.JPanel {

    private MenuPanelTopComponent menuPanel;

    /**
     * Creates new form ScenePanel
     */
    public ScenePanelTopComponent() {
        initComponents();

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 789, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 897, Short.MAX_VALUE)
        );
    }// </editor-fold>//GEN-END:initComponents

    @Override
    public void paintComponent(Graphics g) {
        super.paintComponent(g); // call superclass's paintComponent

        Graphics2D g2 = (Graphics2D) g; // cast g to Graphics2D

        if (s != null) {
            s.drawScene(g2, this.getWidth(), this.getHeight());
        }
    }

    MapGeneratorSceneModel s;
    // Variables declaration - do not modify//GEN-BEGIN:variables
    // End of variables declaration//GEN-END:variables

    void init(MenuPanelTopComponent menuPanel) {
        s = new MapGeneratorSceneModel(10, 10, this.getWidth(), this.getHeight());
        this.menuPanel = menuPanel;
    }

    void resizeScene(int num_x, int num_y) {
        s.resize(num_x, num_y);
        repaint();
    }

    void exportScene(String text) {
        //richiamo l'export della scena il quale mi dará una stringa con tutto il codice clips corrispondente
        String sceneFile = s.exportScene();
        //richiamo l'export della history il quale mi dará una stringa con tutto il codice clips corrispondente
        String historyFile = s.exportHistory();
        try {
            if (text.length() > 0 && text != null) {
                //scrivo il file della mappa
                Files.write(Paths.get(text + "/InitMap.txt"), sceneFile.getBytes());
                this.menuPanel.printMsg("File creato \n" + Paths.get(text + "/InitMap.txt"));

                if (historyFile.length() > 0) //scrivo il file della history solo se sono
                {                               //sono state aggiunte persone alla scena
                    Files.write(Paths.get(text + "/history.txt"), historyFile.getBytes());
                    this.menuPanel.printMsg("File creato \n" + Paths.get(text + "/history.txt"));
                }
                //scrivo il file json con la mappa scritta
                MapGeneratorLoader.salva_info_mappa(s, text);
                this.menuPanel.printMsg("File creato \n" + Paths.get(text + "/InfoMappa.json"));

            } else {
                this.menuPanel.errorMsg("Inserire un nome valido");
            }
        } catch (IOException ex) {
            Logger.getLogger(ScenePanelTopComponent.class.getName()).log(Level.SEVERE, null, ex);
        }

    }

    void click(int x, int y, String state) {

        //leggo il click e passo i valori alla scena
        String result = s.click(x, y, state);
        // se il click é andato a buon fine faccio un repaint senno mostro un messaggio d'errore
        if (result.equals("success")) {
            repaint();
        } else {
            menuPanel.errorMsg(result);
        }
    }

    void updateScene(MapGeneratorSceneModel s) {
        s.setSizeScreen(this.getWidth(), this.getHeight());
        s.resize(s.getNumx(), s.getNumy());
        s.loadImages();
        this.s = s;
        this.repaint();
    }
}
